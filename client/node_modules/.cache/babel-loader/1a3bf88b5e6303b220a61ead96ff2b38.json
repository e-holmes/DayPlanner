{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bethh\\\\OneDrive\\\\Documents\\\\DayPlanner\\\\client\\\\src\\\\components\\\\ValidatedLoginForm\\\\index.js\";\nimport React from \"react\";\nimport API from \"../../utils/API\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\n\nvar ValidatedLoginForm = function ValidatedLoginForm() {\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting;\n      API.saveUser({\n        email: values.email,\n        password: values.password\n      }).catch(function (err) {\n        return console.log(err);\n      });\n      setTimeout(function () {\n        console.log(\"Logging in\", values);\n        setSubmitting(false);\n      }, 500);\n    } //********Using Yup for validation********/\n    ,\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email().required(\"Required\"),\n      password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, function (props) {\n    var values = props.values,\n        touched = props.touched,\n        errors = props.errors,\n        isSubmitting = props.isSubmitting,\n        handleChange = props.handleChange,\n        handleBlur = props.handleBlur,\n        handleSubmit = props.handleSubmit;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Email\"), React.createElement(\"input\", {\n      name: \"email\",\n      type: \"text\",\n      placeholder: \"Enter your email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.email && touched.email && \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), errors.email && touched.email && React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, errors.email), React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Enter your password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.password && touched.password && \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), errors.password && touched.password && React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, errors.password), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Register\"));\n  });\n};\n\nexport default ValidatedLoginForm;","map":{"version":3,"sources":["C:/Users/bethh/OneDrive/Documents/DayPlanner/client/src/components/ValidatedLoginForm/index.js"],"names":["React","API","Formik","EmailValidator","Yup","ValidatedLoginForm","email","password","values","setSubmitting","saveUser","catch","err","console","log","setTimeout","object","shape","string","required","min","matches","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport { Formik } from \"formik\";\r\nimport * as EmailValidator from \"email-validator\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst ValidatedLoginForm = () => (\r\n    <Formik\r\n        initialValues={{ email: \"\", password: \"\" }}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n            API.saveUser({\r\n                email: values.email,\r\n                password: values.password\r\n            })\r\n                .catch(err => console.log(err));\r\n\r\n            setTimeout(() => {\r\n                console.log(\"Logging in\", values);\r\n                setSubmitting(false);\r\n            }, 500);\r\n        }}\r\n\r\n        //********Using Yup for validation********/\r\n\r\n        validationSchema={Yup.object().shape({\r\n            email: Yup.string()\r\n                .email()\r\n                .required(\"Required\"),\r\n            password: Yup.string()\r\n                .required(\"No password provided.\")\r\n                .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n                .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\r\n        })}\r\n    >\r\n        {props => {\r\n            const {\r\n                values,\r\n                touched,\r\n                errors,\r\n                isSubmitting,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit\r\n            } = props;\r\n            return (\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your email\"\r\n                        value={values.email}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        className={errors.email && touched.email && \"error\"}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                        <div className=\"input-feedback\">{errors.email}</div>\r\n                    )}\r\n                    <label htmlFor=\"email\">Password</label>\r\n                    <input\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter your password\"\r\n                        value={values.password}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        className={errors.password && touched.password && \"error\"}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                        <div className=\"input-feedback\">{errors.password}</div>\r\n                    )}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Register\r\n          </button>\r\n                </form>\r\n            );\r\n        }}\r\n    </Formik>\r\n);\r\n\r\nexport default ValidatedLoginForm;\r\n"]},"metadata":{},"sourceType":"module"}